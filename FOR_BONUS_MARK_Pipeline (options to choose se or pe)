#!/bin/bash

#Greeting from the creators Targeted DNA-Seq Pipeline.
#This version was created for the purposes of adding the options for Paired-end Reads. 
#It may not run but we wanted to make the effort and try to see if we could get it to work

echo
echo "Hi there! This is a Targeted DNA-Seq Pipeline created for the purposes of a collaboration project for BINF*6410 at the University of Guelph"
echo "Below is our team members!"
echo "Lam, Yuen Yu Phyllis"
echo "Sidhu, Akaash"
echo "Manesis, Nikolaos"
echo "Yu, Jiaojia"
echo "Sheng, Yiru"


TIMESTAMP=$(date +%Y-%m-%d_%Hh%Mm%Ss)

echo
echo "Starting time: $TIMESTAMP"
echo

echo
echo "The first step in our pipeline is to demultiplex using Sabre"
echo

#Step 1: Set the parameters to conduct a Sabre demulitplex.

echo "Single-End (SE) or Paired-End (PE)? Type SE or PE" 
read end

if [[ $end = SE ]];
then
 echo "We need an absolute path to your FASTQ file"
 read FASTQ

 echo "We need an absolute path to your Barcode file"
 read BAR

 echo "We need an absolute path to your Reference file"
 read REF

 echo "Enter your ADAPTER sequence"
 read ADAP

elif [[ $end = PE ]];
then
 echo "We need an absolute path to your 1st FASTQ file"
 read FASTQ1

 echo "We need an absolute path to your 2nd FASTQ file"
 read FASTQ2

 echo "We need an absolute path to your Barcode file"
 read BARCODE

 echo "We need an absolute path to your Reference file"
 read REFERENCE

 echo "We need your forward adapter to remove"
 read ADAP1

 echo "We need your reverse adapter to remove"
 read ADAP2

else
 echo "Error: wrong input"
 exit 1

fi

#Step 2: Create a new directory called DeMulti which is where our work will be done. Create a .log file where each step in the pipeline can be viewed.

echo "We will be working in the newly created DeMulti directory"
echo "To view every step in the pipeline, look at the general.log"

mkdir DeMulti
cd DeMulti

#Step 3: Execute the program where if [[ $end = SE ]]; then sabre se is used and if [[ $end = PE ]]; then  sabre pe is used.

exec &> sabre.log

#Run the program

if [[ $end = SE ]];
then 
sabre se -f $FASTQ -b $BAR -u unk.fastq
               elif [ $? -ne 0 ];then
                        printf "Sabre Detected an Error: Exit and Check general.log"
                        exit 1
                else
                        printf "Demultiplexing by Sabre Complete" > general.log
                fi

if [[ $end = PE ]];
then

sabre pe -f $FASTQ1 -r $FASTQ2 -b $BARCODE -u uknown1.fastq -w unknown2.fastq
		elif [ $? -ne 0 ];then
			printf "Sabre Detected an Error: Exit and Check pairedend.log"
			exit 1
		else
			printf "Demultiplexing by Sabre Complete" > general_pe.log
		fi 


#Step 4: Trim the adaptor from sequences using CutAdapt

#There are two options depending on whether the reads are SE or PE as specified in the beginning of the of the pipeline.
#For paired-end reads there will be two sets of files: Read 1 files and Read 2 files, they both have to be trimmed.
#Disclaimer: Using CutAdapt assumes that the adaptor sequences are known.

exec &> cutadapt.log

#Define the ADAP variable with the adaptor sequence that will be trimmed.

if [[ $end = SE ]];
then

parallel -j 4 cutadapt -a $ADAP -m 50 -o {}.fastq {}.fq ::: $(ls -l *.fq | sed 's/.fq//')
                elif [ $? -ne 0 ];then
                                printf "Cutadapt Detected an Error: Exit and Check general.log"
                                exit 1
                else
                        printf "Removal of Adapter Sequences by Cutadapt Complete" >> general.log
                fi
if [[ $end = PE ]];
then

parallel -j 4 cutadapt -a $ADAP1 -A $ADAP2 -m 50 -o {}R1.fastq {}R1.fq ::: $(ls -l *R1.fq | sed 's/R1.fq//')
		elif [ $? -ne 0 ];then
				printf "Cutadapt Detected an Error: Exit and Check general.log"
				exit 1
		else
			printf "Removal of Adaptor Sequences from R1 by Cutadapt Complete" >> general_pe.log
		fi

parallel -j 4 cutadapt -a $ADAPT1 -A $ADAPT2 -m 50 -o {}R2.fastq {}R2.fq ::: $(ls -l *R2.fq | sed 's/R2.fq//')
                elif [ $? -ne 0 ];then
                                printf "Cutadapt Detected an Error: Exit and Check general.log"
                                exit 1
                else
                        printf "Removal of Adaptor Sequences from R2 by Cutadapt Complete" >> general_pe.log
                fi 

#Step 5: Map Reads using BWA

#There are two options depending on whether the reads are SE or PE as specified in the beginning of the of the pipeline.

exec &> bwa.log

if [[ $end = SE ]];
then

parallel -j 3 bwa mem -t 2 $REF {}.fastq ">" {}.sam ::: $(ls -l *.fastq | sed 's/.fastq//')
                elif [ $? -ne 0 ];then
                                printf "BWA Detected an Error: Exit and Check general.log"
                else
                                printf "Mapping of Reads Completed by BWA" >> general.log
                fi

if [[ $end = PE ]];
then

parallel -j 3 bwa mem -t 2 $REFERENCE  {}R1.fastq {}R2.fastq ">" {}.sam ::: $(ls -l *.fastq | sed 's/.fastq//')
		elif [ $? -ne 0 ];then
				printf "BWA Detected an Error: Exit and Check pairedend.log"
		else
				printf "Mapping of Reads Completed by BWA" >> general_pe.log
		fi

#Step 6: Convert .SAM to .BAM using samtools view

exec &> samconversion.log

parallel -j 4 samtools view -b -S -h {}.sam ">" {}.temp.bam ::: $(ls -1 *.sam | sed 's/.sam//')
                if [ $? -ne 0 ];then
                                printf "Samtools-Temp Detected an Error: Exit and Check general.log!"
                                exit 1
                else
                                printf "Samtools has converted SAM into TEMP.BAM" >> general.log
                fi


#Step 7: Sort alignments using samtools sort

parallel -j 4 samtools sort {}.temp.bam -o {}.sort.bam ::: $(ls -1 *.temp.bam | sed 's/.temp.bam//')
                if [ $? -ne 0 ];then
                                printf "Samtools-Sort Detected an Error: Exit and Check general.log!"
                                exit 1
                else
                                printf "Samtools has sorted alignments" >> general.log
                fi


#Step 8: Create an index using samtools index
parallel -j 4 samtools index {} ::: $(ls -1 *.sort.bam)
                if [ $? -ne 0 ];then
                                printf "Samtools-Index Detected an Error: Exit and Check general.log!"
                                exit 1
                else
                                printf "Samtools has completed indexing" >> general.log
                fi

for i in $(ls -1 *.sort.bam)
                do
                                printf "$PWD/${i}\n" >> "bamlist"
                if [ $? -ne 0 ];then
                                printf "BAMlist Detected an Error: Exit and Check general.log!"
                                exit 1
                fi
	done
				printf "Bamlist Completed" >> general.log

#Step 9: Using Samtools to pileup the multiple BAM files.

samtools mpileup -g -f $REF -b ./bamlist > variants.bcf

	if [ $? -ne 0 ];then
			printf "Samtools mpileup Detected an Error: Exit and Check general.log!"
	exit 1
	else
			printf "Variant Calling by Samtools Complete" >>general.log
	fi

#Step 10: Convert BCF into VCF using BCFtools

bcftools call -mv variants.bcf > variants.vcf

                if [ $? -ne 0 ]; then
                printf "BCFtools Detected an Error: Exit and Check general.log!"
                exit 1
                else
                                printf "BCF to VCF Conversion Complete by BCFtools" >> general.log
                                printf "All Steps are Complete" >> general.log
        fi

exit 0

